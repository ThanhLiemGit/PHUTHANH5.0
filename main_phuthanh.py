from fastapi import FastAPI, Request
from logic_phuthanh import check_address, normalize
from logic_txt import analyze_address
import os
import requests
import re
import openai

app = FastAPI()

# L·∫•y token Telegram v√† c·∫•u h√¨nh GPT
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_URL = f"https://api.telegram.org/bot{TOKEN}"
USE_GPT = os.getenv("USE_GPT", "true").lower() == "true"
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Kh·ªüi t·∫°o client GPT (Together API)
client = None
if USE_GPT and OPENAI_API_KEY:
    client = openai.OpenAI(
        api_key=OPENAI_API_KEY,
        base_url="https://api.together.xyz/v1"
    )

# H√†m ki·ªÉm tra ƒë·ªãnh d·∫°ng ƒë·ªãa ch·ªâ
def is_address(text: str):
    text = normalize(text)
    pattern = r"^\d+[a-zA-Z]?(?:/\d+)*(?:\s+duong)?\s+[a-z\s]+$"
    return re.match(pattern, text) is not None

# H√†m g·ª≠i tin nh·∫Øn Telegram
def send(chat_id, text):
    requests.post(f"{API_URL}/sendMessage", json={"chat_id": chat_id, "text": text})

# H√†m x·ª≠ l√Ω GPT
def gpt_reply(prompt):
    try:
        print("üîÅ G·ªçi GPT v·ªõi prompt:", prompt)
        response = client.chat.completions.create(
            model="mistralai/Mixtral-8x7B-Instruct-v0.1",
            messages=[
                {
                    "role": "system",
                    "content": "B·∫°n l√† c√°n b·ªô ph∆∞·ªùng t∆∞ v·∫•n ƒë·ªãa ch·ªâ, n√≥i th√¢n thi·ªán nh∆∞ng ƒë√∫ng th·ª±c t·∫ø d·ªØ li·ªáu ƒë·ªãa ph∆∞∆°ng."
                },
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print("‚ùå L·ªói GPT:", e)
        return "‚ö†Ô∏è Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë khi truy c·∫≠p GPT. Vui l√≤ng th·ª≠ l·∫°i sau."

# Webhook Telegram
@app.post("/webhook")
async def telegram_webhook(req: Request):
    data = await req.json()
    if "message" in data and "text" in data["message"]:
        chat_id = data["message"]["chat"]["id"]
        text = data["message"]["text"]

        if is_address(text):
            logic_result = check_address(text)
            if logic_result.startswith("‚úÖ"):
                data = analyze_address(text)
                if data:
                    prompt = f"""
ƒê·ªãa ch·ªâ ng∆∞·ªùi d√¢n nh·∫≠p: **{text}**

‚úÖ H·ªá th·ªëng ƒë√£ x√°c nh·∫≠n ƒë·ªãa ch·ªâ h·ª£p l·ªá: {logic_result}

M√¥ t·∫£ tuy·∫øn ƒë∆∞·ªùng:
{data['mo_ta']}

H√£y ph·∫£n h·ªìi l·∫°i nh∆∞ c√°n b·ªô ph∆∞·ªùng: x√°c nh·∫≠n ƒë·ªãa ch·ªâ v√† chia s·∫ª th√™m v√†i l∆∞u √Ω n·∫øu c√≥.
"""
                    reply = gpt_reply(prompt)
                else:
                    reply = logic_result
            else:
                reply = logic_result  # l·ªói logic, kh√¥ng d√πng GPT
        elif USE_GPT:
            reply = gpt_reply(text)
        else:
            reply = "‚ùó Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ theo m·∫´u: 3/11 Hi·ªÅn V∆∞∆°ng"
        send(chat_id, reply)
    return {"ok": True"}