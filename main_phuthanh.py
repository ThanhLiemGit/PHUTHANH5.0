import json
from fastapi import FastAPI, Request
import httpx
import os
from logic_phuthanh_hem_fixed import check_address
from openai import AsyncOpenAI

app = FastAPI()

# Load d·ªØ li·ªáu c√°n b·ªô khu ph·ªë
with open("khu_pho_info.json", "r", encoding="utf-8") as f:
    khu_pho_data = json.load(f)

# Together API
client = AsyncOpenAI(api_key=os.getenv("TOGETHER_API_KEY"), base_url="https://api.together.xyz/v1")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"

# ------------------------------------------------
def format_address_response(addr_info, user_input):
    kp = addr_info.get("khu_pho")
    if not kp:
        return f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin cho ƒë·ªãa ch·ªâ {user_input}"

    info = khu_pho_data.get(str(kp), {})
    return (
        f"üìç ƒê·ªãa ch·ªâ **{user_input}** thu·ªôc **Khu ph·ªë {kp}**, Ph∆∞·ªùng Ph√∫ Th·∫°nh.\n\n"
        f"üë§ B√≠ th∆∞ chi b·ªô: {info.get('bi_thu', 'Ch∆∞a c·∫≠p nh·∫≠t')}\n"
        f"üë§ Khu ph·ªë tr∆∞·ªüng: {info.get('truong', 'Ch∆∞a c·∫≠p nh·∫≠t')}\n"
        f"üìû Li√™n h·ªá: {info.get('so_dien_thoai', 'Ch∆∞a c√≥')}\n"
        f"üëÆ CSKV: {info.get('canh_sat', 'Ch∆∞a c·∫≠p nh·∫≠t')}"
    )

async def call_gpt_with_context(user_input: str):
    prompt = f"""
B·∫°n l√† c√°n b·ªô ph∆∞·ªùng Ph√∫ Th·∫°nh. Ng∆∞·ªùi d√¢n nh·∫Øn: "{user_input}".
N·∫øu ƒë√¢y kh√¥ng ph·∫£i ƒë·ªãa ch·ªâ h·ª£p l·ªá trong d·ªØ li·ªáu th√¨ tr·∫£ l·ªùi th√¢n thi·ªán, gi·∫£i th√≠ch r·∫±ng b·∫°n ch·ªâ h·ªó tr·ª£ tra c·ª©u ƒë·ªãa ch·ªâ trong Ph∆∞·ªùng Ph√∫ Th·∫°nh.
"""
    response = await client.chat.completions.create(
        model="mistralai/Mixtral-8x7B-Instruct-v0.1",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=400
    )
    return response.choices[0].message.content.strip()

async def handle_message(user_input: str):
    addr_info = check_address(user_input)

    if addr_info and addr_info.get("khu_pho"):
        return format_address_response(addr_info, user_input)
    else:
        return await call_gpt_with_context(user_input)

@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    if "message" in data and "text" in data["message"]:
        chat_id = data["message"]["chat"]["id"]
        user_input = data["message"]["text"].strip()
        reply = await handle_message(user_input)

        async with httpx.AsyncClient() as client:
            await client.post(f"{TELEGRAM_API_URL}/sendMessage", json={
                "chat_id": chat_id,
                "text": reply,
                "parse_mode": "Markdown"
            })

    return {"ok": True}
